// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoldierTracker.Infrastructure.Persistence;

#nullable disable

namespace SoldierTracker.Infrastructure.Migrations
{
    [DbContext(typeof(SoldierTrackerDbContext))]
    partial class SoldierTrackerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SoldierTracker.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CountryName")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SoldierTracker.Domain.Entities.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("RankName")
                        .IsUnique();

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("SoldierTracker.Domain.Entities.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SensorName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("SoldierID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("SensorName")
                        .IsUnique();

                    b.HasIndex("SoldierID");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("SoldierTracker.Domain.Entities.Soldier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("RankID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SoldierCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrainingInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.HasIndex("RankID");

                    b.HasIndex("SoldierCode")
                        .IsUnique();

                    b.ToTable("Soldiers");
                });

            modelBuilder.Entity("SoldierTracker.Domain.Entities.SoldierLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(10,7)");

                    b.Property<DateTimeOffset>("LocationTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(10,7)");

                    b.Property<Guid>("SoldierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("SoldierId");

                    b.ToTable("SoldierLocations");
                });

            modelBuilder.Entity("SoldierTracker.Domain.Entities.Sensor", b =>
                {
                    b.HasOne("SoldierTracker.Domain.Entities.Soldier", "Soldier")
                        .WithMany("Sensors")
                        .HasForeignKey("SoldierID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Soldier");
                });

            modelBuilder.Entity("SoldierTracker.Domain.Entities.Soldier", b =>
                {
                    b.HasOne("SoldierTracker.Domain.Entities.Country", "Country")
                        .WithMany("Soldiers")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoldierTracker.Domain.Entities.Rank", "Rank")
                        .WithMany("Soldiers")
                        .HasForeignKey("RankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("SoldierTracker.Domain.Entities.SoldierLocation", b =>
                {
                    b.HasOne("SoldierTracker.Domain.Entities.Soldier", "Soldier")
                        .WithMany("SoldierLocations")
                        .HasForeignKey("SoldierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Soldier");
                });

            modelBuilder.Entity("SoldierTracker.Domain.Entities.Country", b =>
                {
                    b.Navigation("Soldiers");
                });

            modelBuilder.Entity("SoldierTracker.Domain.Entities.Rank", b =>
                {
                    b.Navigation("Soldiers");
                });

            modelBuilder.Entity("SoldierTracker.Domain.Entities.Soldier", b =>
                {
                    b.Navigation("Sensors");

                    b.Navigation("SoldierLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
